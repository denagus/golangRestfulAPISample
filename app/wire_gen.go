// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package app

import (
	"github.com/kyawmyintthein/golangRestfulAPISample/app/delivery/api"
	"github.com/kyawmyintthein/golangRestfulAPISample/app/injectors"
	"github.com/kyawmyintthein/golangRestfulAPISample/app/repository/mongo_repository"
	"github.com/kyawmyintthein/golangRestfulAPISample/app/repository/mysql_repository"
	"github.com/kyawmyintthein/golangRestfulAPISample/app/service"
	"github.com/kyawmyintthein/golangRestfulAPISample/infrastructure"
)

// Injectors from wire.go:

func NewApp(configFilePaths ...string) (*restApiApplication, error) {
	generalConfig, err := injectors.ProvideConfig(configFilePaths...)
	if err != nil {
		return nil, err
	}
	mux := injectors.ProvideRouter(generalConfig)
	server := injectors.ProvideHttpServer(generalConfig, mux)
	sqlDBConnector, err := injectors.ProvideSqlDBConnector(generalConfig)
	if err != nil {
		return nil, err
	}
	newrelicTracer, err := injectors.ProvideNewRelic(generalConfig)
	if err != nil {
		return nil, err
	}
	baseSqlRepository := injectors.ProvideBaseSqlRepo(generalConfig, sqlDBConnector, newrelicTracer)
	userRepository := mysql_repository.ProvideUserRepository(baseSqlRepository)
	userService := service.ProvideUserService(userRepository)
	httpResponseWriter := infrastructure.NewHttpResponseWriter(generalConfig)
	baseHandler := api.ProvideBaseHandler(generalConfig, httpResponseWriter)
	healthHandler := api.ProvideHealthHandler(baseHandler)
	shutdownHandler := api.ProvideShutdownHandler(baseHandler)
	userHandler := api.ProvideUserHandler(userService)
	mongodbConnector, err := injectors.ProvideMongoDBConnector(generalConfig)
	if err != nil {
		return nil, err
	}
	baseMongoRepo := injectors.ProvideBaseMongoRepo(generalConfig, mongodbConnector, newrelicTracer)
	articlesRepository := mongo_repository.ProvideArticleRepository(baseMongoRepo)
	stringHelper := infrastructure.ProvideStringHelper()
	articleService := service.ProvideArticleService(userRepository, articlesRepository, stringHelper)
	articleHandler := api.ProvideArticleHandler(baseHandler, articleService)
	appRestApiApplication := &restApiApplication{
		config:          generalConfig,
		router:          mux,
		httpServer:      server,
		userRepository:  userRepository,
		userService:     userService,
		HealthHandler:   healthHandler,
		ShutdownHandler: shutdownHandler,
		UserHandler:     userHandler,
		ArticleHandler:  articleHandler,
	}
	return appRestApiApplication, nil
}
